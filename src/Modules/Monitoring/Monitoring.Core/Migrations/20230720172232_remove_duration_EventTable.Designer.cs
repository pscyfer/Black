// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monitoring.Core;

#nullable disable

namespace Monitoring.Core.Migrations
{
    [DbContext(typeof(MonitorDbContext))]
    [Migration("20230720172232_remove_duration_EventTable")]
    partial class remove_duration_EventTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Monitor")
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Monitoring.Core.Entities.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DateTime")
                        .HasColumnType("bigint");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<long>("MonitorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonitorId");

                    b.ToTable("Events", "Monitor");
                });

            modelBuilder.Entity("Monitoring.Core.Entities.Incident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Cause")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MonitorId")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StartAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MonitorId");

                    b.ToTable("Incidents", "Monitor");
                });

            modelBuilder.Entity("Monitoring.Core.Entities.Monitor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsPause")
                        .HasColumnType("bit");

                    b.Property<long>("LastChecked")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeout")
                        .HasColumnType("int");

                    b.Property<long>("UpTimeFor")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Monitors", "Monitor");
                });

            modelBuilder.Entity("Monitoring.Core.Entities.ResponsTimeMonitor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DateTime")
                        .HasColumnType("bigint");

                    b.Property<long>("MonitorId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResponsTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MonitorId");

                    b.ToTable("MonitorResponsTime", "Monitor");
                });

            modelBuilder.Entity("Monitoring.Core.Entities.Event", b =>
                {
                    b.HasOne("Monitoring.Core.Entities.Monitor", "Monitor")
                        .WithMany("Events")
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monitor");
                });

            modelBuilder.Entity("Monitoring.Core.Entities.Incident", b =>
                {
                    b.HasOne("Monitoring.Core.Entities.Monitor", "Monitor")
                        .WithMany("Incidents")
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monitor");
                });

            modelBuilder.Entity("Monitoring.Core.Entities.Monitor", b =>
                {
                    b.OwnsOne("Monitoring.Core.Entities.ValueObjects.HttpRequest", "Http", b1 =>
                        {
                            b1.Property<long>("MonitorId")
                                .HasColumnType("bigint");

                            b1.Property<long>("DomainExpierDate")
                                .HasColumnType("bigint");

                            b1.Property<bool>("IsDomainCheck")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsSslVerification")
                                .HasColumnType("bit");

                            b1.Property<int>("Method")
                                .HasColumnType("int");

                            b1.Property<int>("StatusCode")
                                .HasColumnType("int");

                            b1.HasKey("MonitorId");

                            b1.ToTable("Monitors", "Monitor");

                            b1.WithOwner()
                                .HasForeignKey("MonitorId");
                        });

                    b.Navigation("Http");
                });

            modelBuilder.Entity("Monitoring.Core.Entities.ResponsTimeMonitor", b =>
                {
                    b.HasOne("Monitoring.Core.Entities.Monitor", "Monitor")
                        .WithMany("ResponsTimes")
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monitor");
                });

            modelBuilder.Entity("Monitoring.Core.Entities.Monitor", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Incidents");

                    b.Navigation("ResponsTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
